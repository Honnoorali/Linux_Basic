server side


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>

#define PORT 8080

void process_create(int client_socket) {
    // perform create operation
    char buffer[1024] = {0};
    recv(client_socket, buffer, 1024, 0);
    printf("Create operation performed: %s\n", buffer);
    send(client_socket, "Record created successfully.", strlen("Record created successfully."), 0);
}

void process_update(int client_socket) {
    // perform update operation
    char buffer[1024] = {0};
    recv(client_socket, buffer, 1024, 0);
    printf("Update operation performed: %s\n", buffer);
    send(client_socket, "Record updated successfully.", strlen("Record updated successfully."), 0);
}

void process_delete(int client_socket) {
    // perform delete operation
    char buffer[1024] = {0};
    recv(client_socket, buffer, 1024, 0);
    printf("Delete operation performed: %s\n", buffer);
    send(client_socket, "Record deleted successfully.", strlen("Record deleted successfully."), 0);
}

int main(int argc, char const *argv[]) {
    int server_socket, client_socket, opt = 1;
    struct sockaddr_in server_addr, client_addr;
    int addrlen = sizeof(server_addr);
    char buffer[1024] = {0};

    // create socket
    if ((server_socket = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }

    // set socket options
    if (setsockopt(server_socket, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {
        perror("setsockopt failed");
        exit(EXIT_FAILURE);
    }

    // bind the socket to the address
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);
    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }

    // listen for incoming connections
    if (listen(server_socket, 3) < 0) {
        perror("listen failed");
        exit(EXIT_FAILURE);
    }

    printf("Server listening on port %d...\n", PORT);

    // accept incoming connections
    while ((client_socket = accept(server_socket, (struct sockaddr *)&client_addr, (socklen_t*)&addrlen))) {
        printf("New client connected\n");

        // receive the operation type from the client
        int operation_type;
        recv(client_socket, &operation_type, sizeof(int), 0);

        // perform the corresponding operation based on the type
        switch (operation_type) {
            case 1:
                process_create(client_socket);
                break;
            case 2:
                process_update(client_socket);
                break;
            case 3:
                process_delete(client_socket);
                break;
            default:
                printf("Invalid operation type.\n");
                break;
        }

        // close the connection with the client
        printf("Closing connection with the client\n");
        close(client_socket);
    }

    return 0;
}

























#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/socket.h>
#include <arpa/inet.h>

#define PORT 8080

int main(int argc, char const *argv[]) {
    int server_fd, new_socket, valread;
    struct sockaddr_in address;
    int opt = 1;
    int addrlen = sizeof(address);
    char buffer[1024] = {0};
    char *create_msg = "Create operation performed successfully!";
    char *update_msg = "Update operation performed successfully!";
    char *delete_msg = "Delete operation performed successfully!";
    
    // Creating socket file descriptor
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }

    // Set socket options
    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {
        perror("setsockopt");
        exit(EXIT_FAILURE);
    }

    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

    // Bind the socket to the given address and port
    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }

    // Listen for incoming connections
    if (listen(server_fd, 3) < 0) {
        perror("listen");
        exit(EXIT_FAILURE);
    }

    // Accept incoming connections
    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t *)&addrlen)) < 0) {
        perror("accept");
        exit(EXIT_FAILURE);
    }

    // Handle client requests
    while (1) {
        memset(buffer, 0, sizeof(buffer));
        valread = read(new_socket, buffer, sizeof(buffer));

        if (strncmp(buffer, "create", 6) == 0) {
            // Perform create operation
            // ...
            send(new_socket, create_msg, strlen(create_msg), 0);
        }
        else if (strncmp(buffer, "update", 6) == 0) {
            // Perform update operation
            // ...
            send(new_socket, update_msg, strlen(update_msg), 0);
        }
        else if (strncmp(buffer, "delete", 6) == 0) {
            // Perform delete operation
            // ...
            send(new_socket, delete_msg, strlen(delete_msg), 0);
        }
    }

    return 0;
}




















#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <errno.h>

#define PORT 8080
#define MAX_CLIENTS 10
#define MAX_BUFFER_SIZE 1024

typedef struct process_table {
    int pid;
    char name[20];
    char status[20];
} process_table;

int process_count = 0;
process_table processes[MAX_CLIENTS];

void add_process(int pid, char *name, char *status) {
    processes[process_count].pid = pid;
    strcpy(processes[process_count].name, name);
    strcpy(processes[process_count].status, status);
    process_count++;
}

void delete_process(int pid) {
    int i, j;
    for (i = 0; i < process_count; i++) {
        if (processes[i].pid == pid) {
            for (j = i; j < process_count - 1; j++) {
                processes[j] = processes[j+1];
            }
            process_count--;
            return;
        }
    }
}

void update_process(int pid, char *status) {
    int i;
    for (i = 0; i < process_count; i++) {
        if (processes[i].pid == pid) {
            strcpy(processes[i].status, status);
            return;
        }
    }
}

int main(int argc, char const *argv[]) {
    int server_fd, new_socket, valread;
    struct sockaddr_in address;
    int opt = 1;
    int addrlen = sizeof(address);
    char buffer[MAX_BUFFER_SIZE] = {0};

    // Create socket file descriptor
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }

    // Attach socket to the port 8080
    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT,
                                                  &opt, sizeof(opt))) {
        perror("setsockopt");
        exit(EXIT_FAILURE);
    }
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

    if (bind(server_fd, (struct sockaddr *)&address,
                                 sizeof(address)) < 0) {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }
    if (listen(server_fd, MAX_CLIENTS) < 0) {
        perror("listen");
        exit(EXIT_FAILURE);
    }

    while (1) {
        if ((new_socket = accept(server_fd, (struct sockaddr *)&address,
                               (socklen_t*)&addrlen))<0) {
            perror("accept");
            exit(EXIT_FAILURE);
        }

        printf("New client connected\n");
        valread = read(new_socket, buffer, MAX_BUFFER_SIZE);
        printf("%s\n", buffer);

        char operation[10], name[20], status[20];
        int pid;

        sscanf(buffer, "%s %d %s %s", operation, &pid, name, status);

        if (strcmp(operation, "create") == 0) {
            add_process(pid, name, status);
            write(new_socket, "Process created successfully", 30);
        }
        else if (strcmp(operation, "update") == 0) {
            update_process(pid, status);
            write(new_socket, "Process updated successfully", 30);
        }
        else if (strcmp(operation,









#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>

#define PORT 8080

struct RouteManagerProcess {
    char name[50];
    int pid;
};

struct RouteManagerProcess table[100];
int tableSize = 0;

int main(int argc, char const *argv[]) {
    int server_fd, new_socket;
    struct sockaddr_in address;
    int opt = 1;
    int addrlen = sizeof(address);

    // Creating socket file descriptor
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }

    // Forcefully attaching socket to the port 8080
    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT,
                &opt, sizeof(opt))) {
        perror("setsockopt");
        exit(EXIT_FAILURE);
    }
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

    // Forcefully attaching socket to the port 8080
    if (bind(server_fd, (struct sockaddr *)&address,
                sizeof(address))<0) {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }
    if (listen(server_fd, 3) < 0) {
        perror("listen");
        exit(EXIT_FAILURE);
    }
    while (1) {
        if ((new_socket = accept(server_fd, (struct sockaddr *)&address,
                        (socklen_t*)&addrlen))<0) {
            perror("accept");
            exit(EXIT_FAILURE);
        }

        // Receive the operation type from client
        char op[10];
        read(new_socket, op, 10);

        // Perform create operation
        if (strcmp(op, "create") == 0) {
            struct RouteManagerProcess process;
            read(new_socket, process.name, 50);
            read(new_socket, &process.pid, sizeof(int));
            table[tableSize++] = process;
        }
        // Perform update operation
        else if (strcmp(op, "update") == 0) {
            int pid;
            read(new_socket, &pid, sizeof(int));
            for (int i = 0; i < tableSize; i++) {
                if (table[i].pid == pid) {
                    read(new_socket, table[i].name, 50);
                    break;
                }
            }
        }
        // Perform delete operation
        else if (strcmp(op, "delete") == 0) {
            int pid;
            read(new_socket, &pid, sizeof(int));
            for (int i = 0; i < tableSize; i++) {
                if (table[i].pid == pid) {
                    table[i] = table[tableSize - 1];
                    tableSize--;
                    break;
                }
            }
        }
        // Invalid operation type
        else {
            char message[] = "Invalid operation type";
            write(new_socket, message, strlen(message));
        }
    }
    return 0;
}
















#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>

#define PORT 8080

// Function to handle create operation
void create_process(int sock) {
    char process_name[20];
    int process_id;

    printf("Enter the name of the process to create: ");
    scanf("%s", process_name);

    printf("Enter the process ID: ");
    scanf("%d", &process_id);

    char buffer[1024] = {0};
    sprintf(buffer, "create:%s:%d", process_name, process_id);
    send(sock, buffer, strlen(buffer), 0);

    char response[1024] = {0};
    recv(sock, response, 1024, 0);
    printf("%s\n", response);
}

// Function to handle update operation
void update_process(int sock) {
    char process_name[20];
    int process_id;

    printf("Enter the name of the process to update: ");
    scanf("%s", process_name);

    printf("Enter the new process ID: ");
    scanf("%d", &process_id);

    char buffer[1024] = {0};
    sprintf(buffer, "update:%s:%d", process_name, process_id);
    send(sock, buffer, strlen(buffer), 0);

    char response[1024] = {0};
    recv(sock, response, 1024, 0);
    printf("%s\n", response);
}

// Function to handle delete operation
void delete_process(int sock) {
    char process_name[20];

    printf("Enter the name of the process to delete: ");
    scanf("%s", process_name);

    char buffer[1024] = {0};
    sprintf(buffer, "delete:%s", process_name);
    send(sock, buffer, strlen(buffer), 0);

    char response[1024] = {0};
    recv(sock, response, 1024, 0);
    printf("%s\n", response);
}

int main(int argc, char const *argv[]) {
    int sock = 0;
    struct sockaddr_in serv_addr;

    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        printf("\n Socket creation error \n");
        return -1;
    }

    memset(&serv_addr, '0', sizeof(serv_addr));

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(PORT);

    if (inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr) <= 0) {
        printf("\nInvalid address/ Address not supported \n");
        return -1;
    }

    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        printf("\nConnection Failed \n");
        return -1;
    }

    printf("Connected to server.\n");

    while (1) {
        int choice;

        printf("\nEnter the operation to perform:\n");
        printf("1. Create process\n");
        printf("2. Update process\n");
        printf("3. Delete process\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                create_process(sock);
                break;

            case 2:
                update_process(sock);
                break;

            case 3:
                delete_process(sock);
                break;

            case 























