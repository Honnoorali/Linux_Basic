server.c

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>

#define CREATE_REQUEST 1
#define UPDATE_REQUEST 2
#define DELETE_REQUEST 3

typedef struct {
    long type;
    char text[100];
} message;

typedef struct {
    char name[20];
    int age;
} person;

typedef struct {
    long type;
    person data;
} ipc_message;

int main() {
    int msgid;
    key_t key;
    message msg;

    key = ftok("server.c", 'a');
    msgid = msgget(key, 0666 | IPC_CREAT);
    if (msgid == -1) {
        printf("Error: could not create message queue\n");
        exit(EXIT_FAILURE);
    }

    while (1) {
        if (msgrcv(msgid, &msg, sizeof(message), 1, 0) == -1) {
            printf("Error: could not receive message\n");
            exit(EXIT_FAILURE);
        }

        ipc_message ipc_msg;
        ipc_msg.type = 1;

        switch (msg.text[0]) {
            case 'c': {
                person new_person;
                strcpy(new_person.name, &msg.text[1]);
                new_person.age = atoi(&msg.text[21]);

                ipc_msg.data = new_person;
                break;
            }
            case 'u': {
                person updated_person;
                strcpy(updated_person.name, &msg.text[1]);
                updated_person.age = atoi(&msg.text[21]);

                ipc_msg.data = updated_person;
                break;
            }
            case 'd': {
                person deleted_person;
                strcpy(deleted_person.name, &msg.text[1]);

                ipc_msg.data = deleted_person;
                break;
            }
            default:
                break;
        }

        if (msgsnd(msgid, &ipc_msg, sizeof(ipc_message), 0) == -1) {
            printf("Error: could not send message\n");
            exit(EXIT_FAILURE);
        }
    }

    return 0;
}



client.c

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/msg.h>

#define MAX 50

// structure for message queue
struct message_buffer {
    long message_type;
    char message_text[MAX];
} message;

int main() {
    key_t key;
    int message_id;
    char operation[MAX], response[MAX];

    // create unique key
    key = ftok("client_server_ipc", 65);
    // create message queue
    message_id = msgget(key, 0666 | IPC_CREAT);

    printf("Enter the operation you want to perform (create/update/delete): ");
    fgets(operation, MAX, stdin);

    // remove newline character from operation
    operation[strcspn(operation, "\n")] = 0;

    // set message type to 1 for server
    message.message_type = 1;
    // copy operation to message text
    strcpy(message.message_text, operation);

    // send message to server
    msgsnd(message_id, &message, sizeof(message), 0);

    // receive response from server
    msgrcv(message_id, &message, sizeof(message), 2, 0);

    // print response
    printf("Server response: %s\n", message.message_text);

    // destroy message queue
    msgctl(message_id, IPC_RMID, NULL);

    return 0;
}


