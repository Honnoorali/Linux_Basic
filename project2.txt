server.c

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>

#define CREATE_REQUEST 1
#define UPDATE_REQUEST 2
#define DELETE_REQUEST 3

typedef struct {
    long type;
    char text[100];
} message;

typedef struct {
    char name[20];
    int age;
} person;

typedef struct {
    long type;
    person data;
} ipc_message;

int main() {
    int msgid;
    key_t key;
    message msg;

    key = ftok("server.c", 'a');
    msgid = msgget(key, 0666 | IPC_CREAT);
    if (msgid == -1) {
        printf("Error: could not create message queue\n");
        exit(EXIT_FAILURE);
    }

    while (1) {
        if (msgrcv(msgid, &msg, sizeof(message), 1, 0) == -1) {
            printf("Error: could not receive message\n");
            exit(EXIT_FAILURE);
        }

        ipc_message ipc_msg;
        ipc_msg.type = 1;

        switch (msg.text[0]) {
            case 'c': {
                person new_person;
                strcpy(new_person.name, &msg.text[1]);
                new_person.age = atoi(&msg.text[21]);

                ipc_msg.data = new_person;
                break;
            }
            case 'u': {
                person updated_person;
                strcpy(updated_person.name, &msg.text[1]);
                updated_person.age = atoi(&msg.text[21]);

                ipc_msg.data = updated_person;
                break;
            }
            case 'd': {
                person deleted_person;
                strcpy(deleted_person.name, &msg.text[1]);

                ipc_msg.data = deleted_person;
                break;
            }
            default:
                break;
        }

        if (msgsnd(msgid, &ipc_msg, sizeof(ipc_message), 0) == -1) {
            printf("Error: could not send message\n");
            exit(EXIT_FAILURE);
        }
    }

    return 0;
}



client.c

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/msg.h>

#define MAX 50

// structure for message queue
struct message_buffer {
    long message_type;
    char message_text[MAX];
} message;

int main() {
    key_t key;
    int message_id;
    char operation[MAX], response[MAX];

    // create unique key
    key = ftok("client_server_ipc", 65);
    // create message queue
    message_id = msgget(key, 0666 | IPC_CREAT);

    printf("Enter the operation you want to perform (create/update/delete): ");
    fgets(operation, MAX, stdin);

    // remove newline character from operation
    operation[strcspn(operation, "\n")] = 0;

    // set message type to 1 for server
    message.message_type = 1;
    // copy operation to message text
    strcpy(message.message_text, operation);

    // send message to server
    msgsnd(message_id, &message, sizeof(message), 0);

    // receive response from server
    msgrcv(message_id, &message, sizeof(message), 2, 0);

    // print response
    printf("Server response: %s\n", message.message_text);

    // destroy message queue
    msgctl(message_id, IPC_RMID, NULL);

    return 0;
}











// C program for the Server Side
 
// inet_addr
#include <arpa/inet.h>
 
// For threading, link with lpthread
#include <pthread.h>
#include <semaphore.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>
 
// Semaphore variables
sem_t x, y;
pthread_t tid;
pthread_t writerthreads[100];
pthread_t readerthreads[100];
int readercount = 0;
 
// Reader Function
void* reader(void* param)
{
    // Lock the semaphore
    sem_wait(&x);
    readercount++;
 
    if (readercount == 1)
        sem_wait(&y);
 
    // Unlock the semaphore
    sem_post(&x);
 
    printf("\n%d reader is inside",
           readercount);
 
    sleep(5);
 
    // Lock the semaphore
    sem_wait(&x);
    readercount--;
 
    if (readercount == 0) {
        sem_post(&y);
    }
 
    // Lock the semaphore
    sem_post(&x);
 
    printf("\n%d Reader is leaving",
           readercount + 1);
    pthread_exit(NULL);
}
 
// Writer Function
void* writer(void* param)
{
    printf("\nWriter is trying to enter");
 
    // Lock the semaphore
    sem_wait(&y);
 
    printf("\nWriter has entered");
 
    // Unlock the semaphore
    sem_post(&y);
 
    printf("\nWriter is leaving");
    pthread_exit(NULL);
}
 
// Driver Code
int main()
{
    // Initialize variables
    int serverSocket, newSocket;
    struct sockaddr_in serverAddr;
    struct sockaddr_storage serverStorage;
 
    socklen_t addr_size;
    sem_init(&x, 0, 1);
    sem_init(&y, 0, 1);
 
    serverSocket = socket(AF_INET, SOCK_STREAM, 0);
    serverAddr.sin_addr.s_addr = INADDR_ANY;
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(8989);
 
    // Bind the socket to the
    // address and port number.
    bind(serverSocket,
         (struct sockaddr*)&serverAddr,
         sizeof(serverAddr));
 
    // Listen on the socket,
    // with 40 max connection
    // requests queued
    if (listen(serverSocket, 50) == 0)
        printf("Listening\n");
    else
        printf("Error\n");
 
    // Array for thread
    pthread_t tid[60];
 
    int i = 0;
 
    while (1) {
        addr_size = sizeof(serverStorage);
 
        // Extract the first
        // connection in the queue
        newSocket = accept(serverSocket,
                           (struct sockaddr*)&serverStorage,
                           &addr_size);
        int choice = 0;
        recv(newSocket,
             &choice, sizeof(choice), 0);
 
        if (choice == 1) {
            // Creater readers thread
            if (pthread_create(&readerthreads[i++], NULL,
                               reader, &newSocket)
                != 0)
 
                // Error in creating thread
                printf("Failed to create thread\n");
        }
        else if (choice == 2) {
            // Create writers thread
            if (pthread_create(&writerthreads[i++], NULL,
                               writer, &newSocket)
                != 0)
 
                // Error in creating thread
                printf("Failed to create thread\n");
        }
 
        if (i >= 50) {
            // Update i
            i = 0;
 
            while (i < 50) {
                // Suspend execution of
                // the calling thread
                // until the target
                // thread terminates
                pthread_join(writerthreads[i++],
                             NULL);
                pthread_join(readerthreads[i++],
                             NULL);
            }
 
            // Update i
            i = 0;
        }
    }
 
    return 0;
}


















// C program for the Client Side
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
 
// inet_addr
#include <arpa/inet.h>
#include <unistd.h>
 
// For threading, link with lpthread
#include <pthread.h>
#include <semaphore.h>
 
// Function to send data to
// server socket.
void* clienthread(void* args)
{
 
    int client_request = *((int*)args);
    int network_socket;
 
    // Create a stream socket
    network_socket = socket(AF_INET,
                            SOCK_STREAM, 0);
 
    // Initialise port number and address
    struct sockaddr_in server_address;
    server_address.sin_family = AF_INET;
    server_address.sin_addr.s_addr = INADDR_ANY;
    server_address.sin_port = htons(8989);
 
    // Initiate a socket connection
    int connection_status = connect(network_socket,
                                    (struct sockaddr*)&server_address,
                                    sizeof(server_address));
 
    // Check for connection error
    if (connection_status < 0) {
        puts("Error\n");
        return 0;
    }
 
    printf("Connection established\n");
 
    // Send data to the socket
    send(network_socket, &client_request,
         sizeof(client_request), 0);
 
    // Close the connection
    close(network_socket);
    pthread_exit(NULL);
 
    return 0;
}
 
// Driver Code
int main()
{
    printf("1. Read\n");
    printf("2. Write\n");
 
    // Input
    int choice;
    scanf("%d", &choice);
    pthread_t tid;
 
    // Create connection
    // depending on the input
    switch (choice) {
    case 1: {
        int client_request = 1;
 
        // Create thread
        pthread_create(&tid, NULL,
                       clienthread,
                       &client_request);
        sleep(20);
        break;
    }
    case 2: {
        int client_request = 2;
 
        // Create thread
        pthread_create(&tid, NULL,
                       clienthread,
                       &client_request);
        sleep(20);
        break;
    }
    default:
        printf("Invalid Input\n");
        break;
    }
 
    // Suspend execution of
    // calling thread
    pthread_join(tid, NULL);
}
































Server.c

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <pthread.h>

#define MAX_CLIENTS 5
#define PORT 8080

int client_count = 0;
int client_sockets[MAX_CLIENTS];
pthread_mutex_t mutex;

void *handle_client(void *arg) {
    int client_socket = *(int *)arg;
    char buffer[1024] = {0};

    while (1) {
        int valread = read(client_socket, buffer, 1024);
        if (valread == 0) {
            // client disconnected
            pthread_mutex_lock(&mutex);
            for (int i = 0; i < MAX_CLIENTS; i++) {
                if (client_sockets[i] == client_socket) {
                    client_sockets[i] = 0;
                    client_count--;
                    break;
                }
            }
            pthread_mutex_unlock(&mutex);
            break;
        } else if (strncmp(buffer, "quit", 4) == 0) {
            // client sent quit command
            break;
        }

        // process client request
        printf("Received message from client: %s\n", buffer);

        // send response to client
        char *response = "Hello from server!";
        write(client_socket, response, strlen(response));
        memset(buffer, 0, 1024);
    }

    close(client_socket);
    pthread_exit(NULL);
}

int main() {
    int server_socket, client_socket;
    struct sockaddr_in address;
    int addrlen = sizeof(address);
    pthread_t threads[MAX_CLIENTS];

    // initialize client sockets array
    memset(client_sockets, 0, sizeof(client_sockets));

    // create server socket
    if ((server_socket = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }

    // bind server socket to address and port
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);
    if (bind(server_socket, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }

    // listen for client connections
    if (listen(server_socket, MAX_CLIENTS) < 0) {
        perror("listen failed");
        exit(EXIT_FAILURE);
    }

    // accept client connections and spawn threads to handle them
    while (1) {
        if ((client_socket = accept(server_socket, (struct sockaddr *)&address, (socklen_t *)&addrlen)) < 0) {
            perror("accept failed");
            exit(EXIT_FAILURE);
        }

        if (client_count >= MAX_CLIENTS) {
            printf("Maximum number of clients reached, rejecting client...\n");
            close(client_socket);
            continue;
        }

        pthread_mutex_lock(&mutex);
        for (int i = 0; i < MAX_CLIENTS; i++) {
            if (client_sockets[i] == 0) {
                client_sockets[i] = client_socket;
                client_count++;
                pthread_create(&threads[i], NULL, handle_client, &client_sockets[i]);
                break;
            }
        }
        pthread_mutex_unlock(&mutex);
    }

    close(server_socket);
    return 0;
}











Client.c


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <netinet/in.h>

#define PORT 8080

int main(int argc, char const *argv[]) {
    int sock = 0;
    struct sockaddr_in serv_addr;
    char buffer[1024] = {0};

    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        printf("\n Socket creation error \n");
        return -1;
    }

    memset(&serv_addr, '0', sizeof(serv_addr));

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(PORT);

    if(inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr)<=0) {
        printf("\nInvalid address/ Address not supported \n");
        return -1;
    }

    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        printf("\nConnection Failed \n");
        return -1;
    }

    while(1) {
        printf("Enter an operation (create/update/delete): ");
        fgets(buffer, 1024, stdin);
        send(sock, buffer, strlen(buffer), 0);
        memset(buffer, 0, sizeof(buffer));
        read(sock, buffer, 1024);
        printf("%s\n", buffer);
    }
    return 0;
}
