server.c


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>

#define MAX_CLIENTS 10

struct client {
    int fd;
    char name[20];
};

int main(int argc, char *argv[]) {
    int server_fd, new_socket, valread;
    struct sockaddr_in address;
    int addrlen = sizeof(address);
    char buffer[1024] = {0};

    // Create server socket
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }

    // Set socket options
    int opt = 1;
    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {
        perror("setsockopt failed");
        exit(EXIT_FAILURE);
    }

    // Bind socket to a port
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(8080);

    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }

    // Listen for connections
    if (listen(server_fd, MAX_CLIENTS) < 0) {
        perror("listen failed");
        exit(EXIT_FAILURE);
    }

    // Accept incoming connections and store client data in struct
    struct client clients[MAX_CLIENTS] = {0};
    int num_clients = 0;
    printf("Waiting for client\n");
    while (1) {
        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t *)&addrlen)) < 0) {
            perror("accept failed");
            exit(EXIT_FAILURE);
        }

        // Add client to array of clients
        clients[num_clients].fd = new_socket;

        // Receive client name
        valread = read(new_socket, buffer, 1024);
        strncpy(clients[num_clients].name, buffer, 20);

        printf("New client connected: %s\n", clients[num_clients].name);
        num_clients++;
    }

    return 0;
}








client.c



#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <stdbool.h>

#define SERVER_IP "127.0.0.1"
#define SERVER_PORT 8080
#define MAX_CLIENTS 100 // Number of clients in the Route Management Table
#define MAX_SIZE 100
/*struct client_data {
    char name[50];
    int age;
    float height;
};*/


struct client_data {
	char ip_address[50];
	char gateway[50];
	char oif[50];
};


struct client_data clients[MAX_CLIENTS]; // array

int num_clients = 0; // current number of clients in the array


// Add a new client 
void add_client(char* ip_address, char* gateway, char* oif) 
{
    if (num_clients < MAX_CLIENTS) 
    {
        strcpy(clients[num_clients].ip_address, ip_address);
        strcpy(clients[num_clients].gateway, gateway);
        strcpy(clients[num_clients].oif, oif);
        num_clients++;
        printf("Client added successfully.\n\n");
    } 
    else 
    {
        printf("Route management table is full.\n");
    }
}

// Update an existing client
void update_client(char* ip_address, char* gateway, char* oif) 
{
    int i;
    for (i = 0; i < num_clients; i++) 
    {
        if (ip_address == ip_address) 
        {
            strcpy(clients[i].gateway, gateway);
            strcpy(clients[i].oif,oif);
            printf("Client updated successfully.\n\n");
            return;
        }
    }
    printf("Client with ID %s not found.\n", ip_address);
}

// Delete an existing client 
void delete_client(char* ip_address) 
{
    int i;
    for (i = 0; i < num_clients; i++) 
    {
        if (ip_address == ip_address) 
        {
            clients[i] = clients[num_clients - 1];
            num_clients--;
            printf("Client deleted successfully.\n\n");
            return;
        }
    }
    printf("Client with ID %s not found.\n", ip_address);
}

// function to display the current list of clients in the array
void display_clients() {
    int i;
    printf("\nNumber of CLients are: %d\n",num_clients);
    printf("Current list of clients:\n");
    for (i = 0; i < num_clients; i++) {
        printf("IP_Address: %s, GATEWAY: %s, OIF: %s\n\n", clients[i].ip_address, clients[i].gateway, clients[i].oif);
    }
}



int main() {
    int sock = 0;
    struct sockaddr_in server_addr;
    char buffer[1024] = {0};
    struct client_data data;

    // create socket
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        printf("Socket creation error\n");
        return -1;
    }

    memset(&server_addr, '0', sizeof(server_addr));

    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(SERVER_PORT);

    // convert IPv4 and IPv6 addresses from text to binary form
    if (inet_pton(AF_INET, SERVER_IP, &server_addr.sin_addr) <= 0) {
        printf("Invalid address/ Address not supported\n");
        return -1;
    }

    // connect to server
    if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        printf("Connection Failed\n");
        return -1;
    }

    // get client data
    
    printf("Enter client name: ");
    fgets(data.oif, 50, stdin);
    /*printf("Enter your age: ");
    scanf("%d", &data.age);
    printf("Enter your height: ");
    scanf("%f", &data.height);
     */
     
    send(sock, &data, sizeof(data), 0);
    //printf("Data sent to server\n");
     
    
    // sample usage of the functions
    bool a=true;
    while(a){
    printf("<------WELCOME---------->\n\n");
    printf("Routing Management Table\n");
    printf("1. Create\n");
    printf("2. Update\n");
    printf("3. Delete\n");
    printf("4. Display\n");
    printf("Enter your choice: ");
    int choice;
    char ip_address[MAX_SIZE];
    char gateway[MAX_SIZE];
    char oif[MAX_SIZE];
    scanf("%d", &choice);
    
    switch (choice) 
    {
    	case 1: {
    		printf("Enter IP address:\n");
    		scanf("%s",ip_address);
    		printf("Enter Gateway address:\n");
    		scanf("%s",gateway);
    		printf("Enter OIF:\n");
    		scanf("%s",oif);	
        	add_client(ip_address,gateway,oif);
        	//add_client("192.168.1.1","10.1.1.1","Etherenet 1");
        	break;
    	}
    	
    	case 2: {
    		printf("Enter Which IP Address want to update:\n");
    		scanf("%s",ip_address);
    		
        	update_client(ip_address, "10.1.2.1", "Ethernet 2");
        	break;
    	}
    	
    	case 3: {
    		printf("Enter Which Client wants to delete (IP_Address):\n");
    		scanf("%s",ip_address);
        	delete_client(ip_address);
        	break;
    	}
    	
    	case 4:	{
    		display_clients();
    		break;
    	}
    	
    	default:
        	printf("Invalid Input\n");
        	break;
    }
    //add_client(1, "Client 1", "192.168.0.1");
    //add_client(2, "Client 2", "192.168.0.2");
    //display_clients();
    //update_client(1, "Client 1 Updated", "192.168.0.3");
    //display_clients();
    //delete_client(2);
    //display_clients();
    
    send(sock, &data, sizeof(data), 0);
    printf("Data sent to server\n");
    
    }
 
         
    // send client data to server
    //send(sock, &data, sizeof(data), 0);
    //printf("Data sent to server\n");

    return 0;
}





